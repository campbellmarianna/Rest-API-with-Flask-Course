# your browser handles request
# a flask application receives a request from your browser
    # a request may ask for the homepage
# a server must be created to understand that request
# classes always start with a captle is a class, start with lowercase is a package

# HTTP Verbs
# HTTP is one of the most popular protocol to create interactions and allowing interactions between to internet connected elements
# What is a web server?
    # hardware
    # software designed to accept incoming web requests
    # For example, Google has many web servers
    # When we go to http://www.google.com in our browser, we send something to a web server
        # Then it can decide to respond
# What do we send?
    # When you go to http://www.google.com, you send the following:
        # GET / HTTP/1.1
        # Host: www.google.com
        # What does this mean:
            # It is a GET request
                # The server then sees GET (a verb - tells the server to some extent what the server will return, it is what we expect of the server) / (path - what we want out of the server) HTTP (protocol - the most popular protocal)/1.1
# So, what?
    # That's it!
    # The server sees that, and then there's code
    # The code may interpret the GET request in many different ways
# For example ...
    # It may give you an error, if / is not found
    # It may give you an error, if HTTP is not supported
    # It may give you an error, if the server is unavailable
    # It may give you HTML code back (which is what it normally does)
    # It may give you some text back
    # It may give you nothing back
# What else?
    # Going to any page in your browser will do the same
# Differences
# The only difference is what the server on the other end responds with
    # Twitter responds with the Twitter HTML
    # git-scm responds with the git-scm HTML
    # Google responds with the Google HTML
# What else?
    # Going to a page will always do a GET # the browser (Chrome, Safari) is configured to do a GET request
    # But there are many other things we can do, such as POST, DELETE, PUT, OPTIONS, HEAD and much more
    # Each server responds differently to each, but they normally have the same meaning in each
# HTTP Verbs
    # GET Retrieve something EX: GET /item/1
    # POST Receive data, and use it EX: POST/item # with a post request normally, you have to send some data along the post request
    # PUT Make sure something is there EX: PUT/item # check if there is something if there is, it will update it
    # DELETE Remove something EX: DELETE /item/1

#REST Principals
# What we know
    # Going to a site does a GET request
    # This normally returns HTML
    # We can return other things
    # We can do other than GET EX: POST
# What is a REST API?
# It's a way of thinking about how a web server responds to your requests
# It doesn't respond with just data
# It responds with resources (the server ask for something and responses with data this is different the server is asking for a resource a thing in the server)
# Resources?
# Similar to object-oriented programming
# Think of the server as having resources, and each is able to interact with the pertinent request

# Stateless
# Another key feature is that REST is supposed to be stateless
# This means one request cannot depend on any other requests
# The server only knows about the current request, and not any previous requests

# For example:
# POST item/chair creates an item
# The server does not know the item now exists
# GET /item/chair then goes to the database and checks to see if the item is there or an error otherwise
# To get an item you do not need to have created an item before--the item could be in the database previously

#Another example
# A user logs in to a web application
# The web server does not know the user is logged in (since it does not remember any state)
# What do we do?
# The web application must send enough data to identify the user in every request, or else the server won't associate the request with the user

# Confusing?
# It's always confusing initially
# As we program these APIs, a lot of these things will come naturally because often they make sense
# Ask questions at any time, I'm always available to help

---
# The Header is the first thing that gets analyzed by the server.
    # The first thing that Flask is going to look at is header to see what this request is

# Postman is extremely useful for testing APIs in development

# A REST API is going to be an interface between your program and other programs that call your API.

# REST was designed to be stateless and to interact with resources

---
# That is why it is really important to go through tutorials so afterwards you can
build it on your own and really learn what it is that your doing.

---
# SQLAlchemy (the original one) is used to easily store objects to a relational database.
# Flask SQLAlchemy is essentially the same but is optimized to work with Flask - knowing
# one will immediately mean you can use the other. There are only a couple differences
# in setup and that's it.
# Your going to understand the power of the ORM (Object Relational Mapper) which
# SQLAlchemy is.

# SQLAlchemy is a piece of software that allows us to very easily map our objects
# to database rows, that may seem weird and a bit confusing but don't worry because
# throughout this section we will explore exactly what that means particularly
# in regards to how easy it is to code and to save things to a database as well as
# delete them and things like that, essentially it is going to make things a lot easier

# folders is python are also called packages were going to create a couple packages
# there are minor differences
# What we have to do to make these packages is the __init__.py
# it tells python that it call look within these folders and find python files

# What a model is?
# We thought of our resource as things that an API responds with, things that API
# clients can ask for and that is true that is what a resource is
# Essentially a resource is what an API thinks of, it deals with resources such as
# users, items, stores, students... basically similar to Object Oriented Programming.
# So our class User is not a resource because the API cannot receive data through
# this class or send this class as a json representation. This class is a helper that we
# use to store some data about a user and also a helper that contains a couple of
# methods that allows us to easily retrieve user objects from a database, so that
# is what a model is, our internal representation of an entity while a resource
# is an external representation of entity.
# Our API clients such as a website or a mobile app think they're interacting
with resources that is what they see and when our API responds it responds with
# resources, again that is what the client sees. However, we deal internally
# with our code with a user. For example, with our security.py file we are using
# find by username for example were not using the resource were using the model
# The model gives is more access without populating our resource


# 81. Stopped at creating user and item models
# I created 10s of different versions incrementally to make sure things were
# working along the way
# Test it each and every time
