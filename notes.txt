# HTTP Verbs
# HTTP is one of the most popular protocol to create interactions and allowing interactions between to internet connected elements
# What is a web server?
    # hardware
    # software designed to accept incoming web requests
    # For example, Google has many web servers
    # When we go to http://www.google.com in our browser, we send something to a web server
        # Then it can decide to respond
# What do we send?
    # When you go to http://www.google.com, you send the following:
        # GET / HTTP/1.1
        # Host: www.google.com
        # What does this mean:
            # It is a GET request
                # The server then sees GET (a verb - tells the server to some extent what the server will return, it is what we expect of the server) / (path - what we want out of the server) HTTP (protocol - the most popular protocal)/1.1
# So, what?
    # That's it!
    # The server sees that, and then there's code
    # The code may interpret the GET request in many different ways
# For example ...
    # It may give you an error, if / is not found
    # It may give you an error, if HTTP is not supported
    # It may give you an error, if the server is unavailable
    # It may give you HTML code back (which is what it normally does)
    # It may give you some text back
    # It may give you nothing back
# What else?
    # Going to any page in your browser will do the same
# Differences
# The only difference is what the server on the other end responds with
    # Twitter responds with the Twitter HTML
    # git-scm responds with the git-scm HTML
    # Google responds with the Google HTML
# What else?
    # Going to a page will always do a GET # the browser (Chrome, Safari) is configured to do a GET request
    # But there are many other things we can do, such as POST, DELETE, PUT, OPTIONS, HEAD and much more
    # Each server responds differently to each, but they normally have the same meaning in each
# HTTP Verbs
    # GET Retrieve something EX: GET /item/1
    # POST Receive data, and use it EX: POST/item # with a post request normally, you have to send some data along the post request
    # PUT Make sure something is there EX: PUT/item # check if there is something if there is, it will update it
    # DELETE Remove something EX: DELETE /item/1
